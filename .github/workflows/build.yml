name: Build

on: [push]

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build for supported platforms
        # https://github.com/electron/electron-packager/blob/ebcbd439ff3e0f6f92fa880ff28a8670a9bcf2ab/src/targets.js#L9
        os: [ macOS-11, ubuntu-20.04, windows-2019 ]
        arch: [ x64, arm64 ]
        include:
        - os: ubuntu-20.04
          arch: armv7l
        - os: ubuntu-20.04
          arch: arm64
        - os: ubuntu-20.04
          arch: x64
        - os: macOS-11
          arch: arm64
          openssl_dir: '/usr/local/opt/openssl@1.1'
        - os: macOS-11
          arch: x64
          openssl_dir: '/usr/local/opt/openssl@1.1'
        - os: windows-2019
          arch: arm64
          openssl_dir: 'C:\Program Files\OpenSSL-Win64\'
        - os: windows-2019
          arch: x64
          openssl_dir: 'C:\Program Files\OpenSSL-Win64\'
        
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ matrix.os }}-${{ matrix.arch }}-modules-${{hashFiles('**/package-lock.json') }}
          
      - name: install Build dependencies (Windows)
        if: matrix.os == 'windows-2019'
        run: choco install openssl

      - name: Install Build dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt update
          sudo apt install libkrb5-dev

      - name: Install dependencies
        env:
          JOBS: 'max'
          npm_config_openssl_dir: ${{ matrix.openssl_dir }}
        run: |
          npm install

      - name: Rebuild native modules
        env:
          JOBS: 'max'
          npm_config_openssl_dir: ${{ matrix.openssl_dir }}
        run: |
          npx electron-rebuild --arch=${{ matrix.arch }}

      - name: Lint
        run: npm run lint

      - name: Load Developer Certificates (macOS)
        if: |
          startsWith(github.ref, 'refs/tags/')
            && matrix.os == 'macOS-11'
        env:
          MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        run:
          chmod +x scripts/setupMacOSCertificates.sh && ./scripts/setupMacOSCertificates.sh
          
      - name: Compile and Sign
        if: startsWith(github.ref, 'refs/tags/')
        env:
          npm_config_openssl_dir: ${{ matrix.openssl_dir }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        run:
          npm run make -- --arch=${{ matrix.arch }}

      - name: Compile
        if: startsWith(github.ref, 'refs/tags/') == false
        env:
          npm_config_openssl_dir: ${{ matrix.openssl_dir }}
        run: npm run make -- --arch=${{ matrix.arch }}

      - name: Test
        if: matrix.os != 'ubuntu-20.04'
        run: npm run test

      - name: Test (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: xvfb-run --auto-servernum -- npm test

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: out/make
          
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "out/make/**"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
